{"name":"metrics-spring","tagline":"Spring integration for Dropwizard Metrics","body":"#Metrics for Spring [![Build Status](https://drone.io/github.com/ryantenney/metrics-spring/status.png)](https://drone.io/github.com/ryantenney/metrics-spring/latest)\r\n\r\n##About\r\n\r\nThe `metrics-spring` module integrates [Coda Hale's Metrics library](http://metrics.codahale.com/) with Spring, and provides XML and Java configuration.\r\n\r\nThis module does the following things:\r\n\r\n* Creates metrics and proxies beans which contain methods annotated with `@Timed`, `@Metered`, `@ExceptionMetered`, and `@Counted`\r\n* Registers a `Gauge` for beans which have members annotated with `@Gauge` and `@CachedGauge`\r\n* Autowires Timers, Meters, Counters and Histograms into fields annotated with `@Metric`\r\n* Registers with the `HealthCheckRegistry` any beans which extend the class `HealthCheck`\r\n* Creates reporters from XML config and binds them to the Spring lifecycle\r\n* Registers metrics and metric sets in XML\r\n\r\n###Maven\r\n\r\nCurrent version is 3.0.3, which is compatible with Metrics 3.0 and 3.1 (but lacks support for new features in 3.1)\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.ryantenney.metrics</groupId>\r\n    <artifactId>metrics-spring</artifactId>\r\n    <version>3.0.3</version>\r\n</dependency>\r\n```\r\n\r\nThis module was formerly contained in the [Metrics repository](https://github.com/codahale/metrics).\r\n\r\n###Basic Usage\r\n\r\nAs of version 3, `metrics-spring` may be configured using XML or Java, depending on your personal preference.\r\n\r\nSpring Context XML:\r\n\r\n```xml\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n       xmlns:metrics=\"http://www.ryantenney.com/schema/metrics\"\r\n       xsi:schemaLocation=\"\r\n           http://www.springframework.org/schema/beans\r\n           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd\r\n           http://www.ryantenney.com/schema/metrics\r\n           http://www.ryantenney.com/schema/metrics/metrics-3.0.xsd\">\r\n\r\n    <!-- Registry should be defined in only one context XML file -->\r\n    <metrics:metric-registry id=\"metrics\" />\r\n\r\n    <!-- annotation-driven must be included in all context files -->\r\n    <metrics:annotation-driven metric-registry=\"metrics\" />\r\n\r\n    <!-- (Optional) Registry should be defined in only one context XML file -->\r\n    <metrics:reporter type=\"console\" metric-registry=\"metrics\" period=\"1m\" />\r\n\r\n    <!-- (Optional) The metrics in this example require the metrics-jvm jar-->\r\n    <metrics:register metric-registry=\"metrics\">\r\n        <bean metrics:name=\"jvm.gc\" class=\"com.codahale.metrics.jvm.GarbageCollectorMetricSet\" />\r\n        <bean metrics:name=\"jvm.memory\" class=\"com.codahale.metrics.jvm.MemoryUsageGaugeSet\" />\r\n        <bean metrics:name=\"jvm.thread-states\" class=\"com.codahale.metrics.jvm.ThreadStatesGaugeSet\" />\r\n        <bean metrics:name=\"jvm.fd.usage\" class=\"com.codahale.metrics.jvm.FileDescriptorRatioGauge\" />\r\n    </metrics:register>\r\n\r\n    <!-- Beans and other Spring config -->\r\n\r\n</beans>\r\n```\r\n\r\nJava Annotation Config:\r\n\r\n```java\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport com.codahale.metrics.ConsoleReporter;\r\nimport com.codahale.metrics.MetricRegistry;\r\nimport com.codahale.metrics.SharedMetricRegistries;\r\nimport com.ryantenney.metrics.spring.config.annotation.EnableMetrics;\r\nimport com.ryantenney.metrics.spring.config.annotation.MetricsConfigurerAdapter;\r\n\r\n@Configuration\r\n@EnableMetrics\r\npublic class SpringConfiguringClass extends MetricsConfigurerAdapter {\r\n\r\n    @Override\r\n    public void configureReporters(MetricRegistry metricRegistry) {\r\n        ConsoleReporter\r\n            .forRegistry(metricRegistry)\r\n            .build()\r\n            .start(1, TimeUnit.MINUTES);\r\n    }\r\n\r\n}\r\n```\r\n\r\n###XML Config Documentation\r\n\r\nThe `<metrics:annotation-driven />` element is required, and has 4 optional arguments:\r\n* Attributes\r\n * `metric-registry` - the id of the `MetricRegsitry` bean with which the generated metrics should be registered. If omitted a new `MetricRegistry` bean is created.\r\n * `health-check-registry` - the id of the `HealthCheckRegsitry` bean with which to register any beans which extend the class `HealthCheck`. If omitted a new `HealthCheckRegistry` bean is created.\r\n * `proxy-target-class` - if set to true, always creates CGLIB proxies instead of defaulting to JDK proxies. This *may* be necessary if you use class-based autowiring.\r\n * `expose-proxy` - if set to true, the target can access the proxy which wraps it by calling `AopContext.currentProxy()`.\r\n\r\nThe `<metrics:metric-registry />` element constructs a new MetricRegistry or retrieves a shared registry:\r\n* Attributes\r\n * `id` - the bean name with which to register the MetricRegistry bean\r\n * `name` - the name of the MetricRegistry, if present, this calls SharedMetricRegistries.getOrCreate(name)\r\n\r\nThe `<metrics:health-check-registry />` element constructs a new HealthCheckRegistry:\r\n* Attributes\r\n * `id` - the bean name with which to register the HealthCheckRegistry bean\r\n\r\nThe `<metrics:reporter />` element creates and starts a reporter:\r\n* Attributes\r\n * `id` - the bean name\r\n * `metric-registry` - the id of the `MetricRegsitry` bean for which the reporter should retrieve metrics\r\n * `type` - the type of the reporter. Additional types may be registered through SPI (more on this later).\r\n  * `console`: ConsoleReporter\r\n  * `jmx`: JmxReporter\r\n  * `slf4j`: Slf4jReporter\r\n  * `ganglia`: GangliaReporter (requires `metrics-ganglia`)\r\n  * `graphite`: GraphiteReporter (requires `metrics-graphite`)\r\n\r\nThe `<metrics:register />` element registers with the MetricRegistry a bean which extends implements Metric or MetricSet\r\n* Attributes\r\n * `metric-registry` - the id of the `MetricRegsitry` bean with which the metrics are to be registered\r\n* Child elements\r\n * `<bean />` - The beans to register with the specified registry.\r\n  * `metrics:name` attribute on the bean element - specifies the name with which the metric will be registered. Optional if the bean is a MetricSet.\r\n\r\n###Java Config Documentation\r\n\r\nA `@Configuration` class annotated with `@EnableMetrics` is functionally equivalent to using the `<metrics:annotation-driven />` element.\r\n\r\n* `proxyTargetClass` - if set to true, always creates CGLIB proxies instead of defaulting to JDK proxies. This *may* be necessary if you use class-based autowiring.\r\n* `exposeProxy` - if set to true, the target can access the proxy which wraps it by calling `AopContext.currentProxy()`.\r\n\r\nThe class may also implement the interface `MetricsConfigurer`, or extend the abstract class `MetricsConfigurerAdapter`\r\n\r\n* `getMetricRegistry()` - return the `MetricRegsitry` instance with which metrics should be registered. If omitted a new `MetricRegistry` instance is created.\r\n* `getHealthCheckRegistry()` - return the `HealthCheckRegsitry` instance with which to register any beans which extend the class `HealthCheck`. If omitted a new `HealthCheckRegistry` instance is created.\r\n* `configureReporters(MetricRegistry)` - configure reporters\r\n\r\n###A Note on the Limitations of Spring AOP\r\n\r\nDue to limitations of Spring AOP only public methods can be proxied, so `@Timed`, `@Metered`, `@ExceptionMetered`, and `@Counted` have no effect on non-public methods. Additionally, calling an annotated method from within the same class will not go through the proxy.\r\n\r\n```java\r\npublic class Foo {\r\n\t\r\n    @Timed\r\n    public void bar() { /* … */ }\r\n\t\r\n    public void baz() {\r\n        this.bar(); // doesn't pass through the proxy\r\n\t\t\r\n        // fix: reengineer\r\n        // workaround: enable `expose-proxy` and change to:\r\n        ((Foo) AopContext.currentProxy()).bar(); // hideous, but it works\r\n    }\r\n}\r\n```\r\n\r\nAs `@Gauge` doesn’t involve a proxy, it may be used on non-public fields and methods.\r\nAdditionally, `@InjectMetric` may be used on non-public, non-final fields.\r\n\r\n###Users of the Maven Shade plugin\r\n\r\nPlease see the [Shade Readme](SHADE-README.md)\r\n\r\n###Documentation\r\n\r\nJavadocs are hosted at http://ryantenney.github.io/metrics-spring/docs/\r\n\r\n\r\n### Acknowledgements\r\n\r\nYourKit is kindly supporting this open source project with its full-featured Java Profiler.\r\nYourKit, LLC is the creator of innovative and intelligent tools for profiling\r\nJava and .NET applications. Take a look at YourKit's leading software products:\r\n[YourKit Java Profiler](http://www.yourkit.com/java/profiler/index.jsp) and\r\n[YourKit .NET Profiler](http://www.yourkit.com/.net/profiler/index.jsp).\r\n\r\n\r\n### License\r\n\r\nCopyright (c) 2012-2014 Ryan Tenney\r\n\r\nPortions Copyright (c) 2012-2013 Martello Technologies\r\n\r\nPublished under Apache Software License 2.0, see LICENSE\r\n\r\n[![Rochester Made](http://rochestermade.com/media/images/rochester-made-dark-on-light.png)](http://rochestermade.com)\r\n","google":"UA-3831117-9","note":"Don't delete this file! It's used internally to help with page regeneration."}