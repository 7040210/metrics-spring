{"name":"metrics-spring","tagline":"Spring integration for Yammer's Metrics library","body":"#Metrics for Spring [![Build Status](https://secure.travis-ci.org/ryantenney/metrics-spring.png)](http://travis-ci.org/ryantenney/metrics-spring)\r\n\r\n##About\r\n\r\nThe `metrics-spring` module integrates [Yammer Metrics](http://metrics.codahale.com/) with Spring AOP, and provides XML and Java configuration.\r\n\r\nThis module does the following things:\r\n\r\n* Proxies beans which contain methods annotated with `@Timed`, `@Metered`, and `@ExceptionMetered`\r\n* Registers a `Gauge` for beans which have members annotated with `@Gauge`\r\n* Autowires Timers, Meters, Counters and Histograms into fields annotated with `@InjectMetric`\r\n* Registers with the `HealthCheckRegistry` any beans which extend the class `HealthCheck`\r\n* Creates reporters and binds them to the Spring lifecycle\r\n\r\n###Maven\r\n\r\nCurrent version is 3.0.0-RC1, which is compatible with Metrics 3.0\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>com.ryantenney.metrics</groupId>\r\n\t<artifactId>metrics-spring</artifactId>\r\n\t<version>3.0.0-RC1</version>\r\n</dependency>\r\n```\r\n\r\nThis module was formerly contained in the [Yammer Metrics repository](https://github.com/codahale/metrics).\r\n\r\n###Basic Usage\r\n\r\n**Pull requests to improve or expand this documentation would be most welcome.**\r\n\r\nSpring Context XML:\r\n\r\n```xml\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\r\n\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\t   xmlns:metrics=\"http://www.ryantenney.com/schema/metrics\"\r\n\t   xsi:schemaLocation=\"\r\n\t\t\thttp://www.springframework.org/schema/beans\r\n\t\t\thttp://www.springframework.org/schema/beans/spring-beans-3.2.xsd\r\n\t\t\thttp://www.ryantenney.com/schema/metrics\r\n\t\t\thttp://www.ryantenney.com/schema/metrics/metrics-3.0.xsd\">\r\n\r\n\t<metrics:metric-registry id=\"registry\" />\r\n\t<metrics:annotation-driven metric-registry=\"registry\" />\r\n\t<metrics:reporter type=\"console\" metric-registry=\"registry\" period=\"1m\" />\r\n\r\n\t<!-- beans -->\r\n\r\n</beans>\r\n```\r\n\r\nJava Annotation Config:\r\n\r\n```java\r\nimport org.springframework.context.annotation.Configuration;\r\nimport com.ryantenney.metrics.spring.config.annotation.EnableMetrics;\r\n\r\n@Configuration\r\n@EnableMetrics\r\npublic class SpringConfiguringClass {\r\n\t// ...\r\n}\r\n```\r\n\r\n###XML Config\r\n\r\nThe `<metrics:annotation-driven />` element is required, and has 4 optional arguments:\r\n\r\n* `metric-registry` - the id of the `MetricRegsitry` bean with which the generated metrics should be registered. If omitted a new `MetricRegistry` bean is created.\r\n* `health-check-registry` - the id of the `HealthCheckRegsitry` bean with which to register any beans which extend the class `HealthCheck`. If omitted a new `HealthCheckRegistry` bean is created.\r\n* `proxy-target-class` - if set to true, always creates CGLIB proxies instead of defaulting to JDK proxies. This *may* be necessary if you use class-based autowiring.\r\n* `expose-proxy` - if set to true, the target can access the proxy which wraps it by calling `AopContext.currentProxy()`.\r\n\r\nThe `<metrics:metric-registry />` element constructs a new MetricRegistry or retrieves a shared registry:\r\n\r\n* `id` - the bean name with which to register the MetricRegistry bean\r\n* `name` - the name of the MetricRegistry, if present, this calls SharedMetricRegistries.getOrCreate(name)\r\n\r\nThe `<metrics:health-check-registry />` element constructs a new HealthCheckRegistry:\r\n\r\n* `id` - the bean name with which to register the HealthCheckRegistry bean\r\n\r\nThe `<metrics:reporter />` element creates and starts a reporter.\r\n\r\n* `id` - \r\n* `metric-registry` - the id of the `MetricRegsitry` bean for which the reporter should retrieve metrics\r\n* `type` - the type of the reporter. Additional types may be registered through SPI (more on this later).\r\n * `console`: ConsoleReporter\r\n * `jmx`: JmxReporter\r\n * `slf4j`: Slf4jReporter\r\n * `ganglia`: GangliaReporter (requires metrics-ganglia)\r\n * `graphite`: GraphiteReporter (requires metrics-graphite)\r\n\r\n\r\n###A Note on the Limitations of Spring AOP\r\n\r\nDue to limitations of Spring AOP only public methods can be proxied, so `@Timed`, `@Metered`, and `@ExceptionMetered` have no effect on non-public methods. Additionally, calling an annotated method from within the same class will not go through the proxy.\r\n\r\n```java\r\npublic class Foo {\r\n\t\r\n\t@Timed\r\n\tpublic void bar() { /* … */ }\r\n\t\r\n\tpublic void baz() {\r\n\t\tthis.bar(); // doesn't pass through the proxy\r\n\t\t\r\n\t\t// fix: reengineer\r\n\t\t// workaround: enable `expose-proxy` and change to:\r\n\t\t((Foo) AopContext.currentProxy()).bar(); // hideous, but it works\r\n\t}\r\n}\r\n```\r\n\r\nAs `@Gauge` doesn’t involve a proxy, it may be used on non-public fields and methods.\r\nAdditionally, `@InjectMetric` may be used on non-public, non-final fields.\r\n\r\n---\r\n\r\n### License\r\n\r\nCopyright (c) 2012-2013 Ryan Tenney, Martello Technologies\r\n\r\nPublished under Apache Software License 2.0, see LICENSE\r\n\r\n[![Rochester Made](http://rochestermade.com/media/images/rochester-made-dark-on-light.png)](http://rochestermade.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}